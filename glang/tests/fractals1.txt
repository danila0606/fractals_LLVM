

func main() {
    init();
    int32 maxIter = 1;
    int32 open = is_window_opened();
    int32 time = 0;

    int32 col = 0;
    int32 row = 0;
    int32 width = 1920;
    int32 height = 1080;

    int32 x_square = 0;
    int32 y_square = 0;

    int32 c_real = 0;
    int32 c_imag = 0;

    int32 c_real1 = 0;
    int32 c_real2 = 0;

    int32 c_imag1 = 0;
    int32 c_imag2 = 0;

    int32 x = 0;
    int32 y = 0;
    int32 i = 0;
    int32 i_old = 0;

    int32 cond = 0;
    int32 cond1 = 0;
    int32 x1 = 0;
    int32 y1 = 0;
    int32 x2 = 0;
    int32 y2 = 0;

    int32 color = 0;
    int32 color1 = 0;

    int32 while_break = 0;

    while (open == 1) {
        int32 time = get_time_milliseconds();
        int32 time = time / 2000;
        int32 maxIter = maxIter + time;

        int32 col = 0;
        while (col < width) {
            int32 row = 0;
            while (row < height) {

                int32 c_real1 = 2000 * col;
                int32 c_real = c_real1/width - 1000;
                
                int32 c_imag1 = 2000 * row;
                int32 c_imag = c_imag1/height - 1000;
                

                int32 i = 0;
                int32 x = 0;
                int32 y = 0;
                int32 i_old = 0;
                int32 while_break = 0;
                while (i < maxIter) {
                    int32 x_square = x * x ;
                    int32 y_square = y * y ;

                    int32 y1 = 2 * x;
                    int32 y2 = y1 * y;
                    int32 y = y2 / 1000 + c_imag;
                   
                    
                    int32 x1 = x_square / 1000 + c_real;
                    int32 x2 = y_square / 1000 ;
                    int32 x = x1 - x2;

                    
                    
                    int32 cond1 = x_square + y_square;
                    int32 cond = cond1 / 1000;
                    
                    if (cond >= 4000) {
                        int32 i_old = i;
                        int32 i = maxIter + 1000;
                        int32 while_break = 1;
                    }
                    int32 i = i + 1;
                }
                
                int32 color = 0;
                if (while_break == 1) {
                    int32 color1 = 255 * i_old;
                    int32 color = color1 / maxIter; 
                }
                
      
                put_pixel (col, row, color, color, color, 255);

                int32 row = row + 1;
            }
            int32 col = col + 1;
        }

        flush();
        int32 open = is_window_opened();
    }
    return 0;
}
